type: edu
custom_name: Errors!
files:
- name: src/cinema/Cinema.java
  visible: true
  text: |-
    package cinema;

    public class Cinema {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class CinemaTests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test1_checkExit() {

            TestedProgram program = new TestedProgram();
            String output = program.start().strip();

            if (!output.toLowerCase().contains("enter the number of rows")) {
                return CheckResult.wrong("At the beginning your program should ask for entering the number of rows.\n" +
                    "Your output should contain 'Enter the number of rows:'.");
            }

            output = program.execute("7");

            if (!output.toLowerCase().contains("enter the number of seats in each row")) {
                return CheckResult.wrong("After entering the number of rows your program should ask for entering" +
                    " the number of seats in each row.\n" +
                    "Your output should contain 'Enter the number of seats in each row'.");
            }

            output = program.execute("8").toLowerCase();

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit") ||
                !output.contains("statistics")) {
                return CheckResult.wrong("Your menu should contain 4 items:\n" +
                    "1. Show the seats\n" +
                    "2. Buy a ticket\n" +
                    "3. Statistics\n" +
                    "0. Exit");
            }

            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item you should stop your program.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkSeatingArrangement() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("1").toLowerCase();
            checkSeats(output, 7, 8);

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit") ||
                !output.contains("statistics")) {
                return CheckResult.wrong("After showing the seats arrangement you should print the menu again!");
            }

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("2\n2");

            output = program.execute("1");
            checkSeats(output, 2, 2);

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            output = program.execute("1");
            checkSeats(output, 9, 9);

            program.execute("0");
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkBuyTicket() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a row number:")) {
                return CheckResult.wrong("After choosing 'Buy a ticket' item you should ask for entering a row number.\n" +
                    "Your output should contain 'Enter a row number:'.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a seat number in that row:")) {
                return CheckResult.wrong("After entering a row number you should ask for entering a seat number in that row.\n" +
                    "Your output should contain 'Enter a seat number in that row:'.");
            }

            output = program.execute("4").toLowerCase();

            if (!output.contains("ticket price")) {
                return CheckResult.wrong("After entering a row number and a seat number in that row you should print" +
                    " the ticket price.\n" +
                    "Your output should contain 'Ticket price:'.");
            }

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit") ||
                !output.contains("statistics")) {
                return CheckResult.wrong("After buying a ticket you should print the menu again!");
            }

            output = program.execute("1");
            checkTakenSeat(output, 7, 8, 2, 4);

            program.execute("2\n3\n5");
            output = program.execute("1");
            checkTakenSeat(output, 7, 8, 3, 5);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkTicketPrice() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            program.execute("2");
            output = program.execute("1\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            program.execute("2");
            output = program.execute("4\n5\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);


            program.execute("2");
            output = program.execute("5\n5\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);

            program.execute("2");
            output = program.execute("6\n6\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);
            checkTakenSeat(output, 9, 9, 6, 6);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test5_checkErrorHandling() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();

            program.execute("9\n9");
            program.execute("2\n1\n1");

            output = program.execute("2\n1\n1");

            if (!output.toLowerCase().contains("that ticket has already been purchased")) {
                return CheckResult.wrong("If the user tries to buy a ticket that already has been purchased you should print: " +
                    "'That ticket has already been purchased'");
            }

            if (!output.toLowerCase().contains("enter a row number")) {
                return CheckResult.wrong("If the user tries to buy a ticket that already has been purchased you should " +
                    "ask to enter a seat coordinates again.");
            }

            output = program.execute("9");

            if (!output.toLowerCase().contains("enter a seat number in that row:")) {
                return CheckResult.wrong("After entering a row number you should ask for entering a seat number in that row.\n" +
                    "Your output should contain 'Enter a seat number in that row:'.");
            }

            output = program.execute("5").toLowerCase();

            if (!output.contains("ticket price")) {
                return CheckResult.wrong("After entering a row number and a seat number in that row you should print" +
                    " the ticket price.\n" +
                    "Your output should contain 'Ticket price:'.");
            }

            if (!output.contains("8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }

            output = program.execute("2\n9\n5");

            if (!output.toLowerCase().contains("that ticket has already been purchased")) {
                return CheckResult.wrong("If the user tries to buy a ticket that already has been purchased you should print:\n" +
                    "'That ticket has already been purchased' and ask to enter a seat coordinates again.");
            }

            program.execute("2\n3");

            output = program.execute("2\n10\n1");

            if (!output.toLowerCase().contains("wrong input")) {
                return CheckResult.wrong("If the user input coordinates is out of bounds you should print 'Wrong input'");
            }

            if (!output.toLowerCase().contains("enter a row number")) {
                return CheckResult.wrong("If the user input coordinates is out of bounds you should " +
                    "ask to enter a seat coordinates again.");
            }

            program.execute("5\n10");

            if (!output.toLowerCase().contains("wrong input")) {
                return CheckResult.wrong("If the user input coordinates is out of bounds you should print 'Wrong input'");
            }

            program.execute("-5\n12");

            if (!output.toLowerCase().contains("wrong input")) {
                return CheckResult.wrong("If the user input coordinates is out of bounds you should print 'Wrong input'");
            }

            program.execute("5\n5");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkStatistics() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            output = program.execute("3").toLowerCase();

            if (!output.contains("number of purchased tickets")) {
                return CheckResult.wrong("After choosing 'Statistics' item can't find information about the number of purchased tickets.\n" +
                    "Your output should contain 'Number of purchased tickets'");
            }

            if (!output.contains("percentage")) {
                return CheckResult.wrong("After choosing 'Statistics' item can't find information about the percentage.\n" +
                    "Your output should contain 'Percentage'");
            }

            if (!output.contains("current income")) {
                return CheckResult.wrong("After choosing 'Statistics' item can't find information about the current income.\n" +
                    "Your output should contain 'Current income'");
            }

            if (!output.contains("total income")) {
                return CheckResult.wrong("After choosing 'Statistics' item can't find information about the total income.\n" +
                    "Your output should contain 'Total income'");
            }

            checkNumberOfPurchasedTickets(output, "0");
            checkPercentage(output, "0.00%");
            checkCurrentIncome(output, "$0");
            checkTotalIncome(output, "$720");


            program.execute("2\n1\n7");
            program.execute("2\n1\n8");
            program.execute("2\n1\n9");
            output = program.execute("3");

            checkNumberOfPurchasedTickets(output, "3");
            checkPercentage(output, "3.70%");
            checkCurrentIncome(output, "$30");
            checkTotalIncome(output, "$720");

            program.execute("2\n9\n1");
            program.execute("2\n9\n2");
            program.execute("2\n9\n3");
            output = program.execute("3");

            checkNumberOfPurchasedTickets(output, "6");
            checkPercentage(output, "7.41%");
            checkCurrentIncome(output, "$54");
            checkTotalIncome(output, "$720");

            for (int i = 1; i < 8; i++) {
                for (int j = 0; j < 9; j++) {
                    output = program.execute("2\n" + (i + 1) + "\n" + (j + 1));
                    if (!output.toLowerCase().contains("ticket price")) {
                        return CheckResult.wrong("After choosing a not taken seat," +
                            " your output should contain 'Ticket price:'.");
                    }
                }
            }

            output = program.execute("3");

            checkNumberOfPurchasedTickets(output, "69");
            checkPercentage(output, "85.19%");
            checkCurrentIncome(output, "$612");
            checkTotalIncome(output, "$720");

            for (int j = 0; j < 6; j++) {
                output = program.execute("2\n" + 1 + "\n" + (j + 1));
                if (!output.toLowerCase().contains("ticket price")) {
                    return CheckResult.wrong("After choosing a not taken seat," +
                        " your output should contain 'Ticket price:'.");
                }
            }

            program.execute("1");

            for (int j = 3; j < 9; j++) {
                output = program.execute("2\n" + 9 + "\n" + (j + 1));
                if (!output.toLowerCase().contains("ticket price")) {
                    return CheckResult.wrong("After choosing a not taken seat," +
                        " your output should contain 'Ticket price:'.");
                }
            }

            output = program.execute("3");

            checkNumberOfPurchasedTickets(output, "81");
            checkPercentage(output, "100.00%");
            checkCurrentIncome(output, "$720");
            checkTotalIncome(output, "$720");

            return CheckResult.correct();
        }


        private void checkNumberOfPurchasedTickets(String output, String correctNumber) {
            String[] splittedOutput = output.trim().split("\n");
            boolean isFound = false;

            for (String line : splittedOutput) {
                if (line.toLowerCase().contains("number of purchased tickets")) {
                    line = line.toLowerCase().replace("number of purchased tickets", "").replace(":", "").trim();
                    isFound = true;
                    if (!line.equals(correctNumber)) {
                        throw new WrongAnswer("Wrong number of purchased tickets!\n" +
                            "Found: " + line + "\n" +
                            "Expected: " + correctNumber);
                    }
                }
            }

            if (!isFound) {
                throw new WrongAnswer("After choosing 'Statistics' item can't find information about the number of purchased tickets.\n" +
                    "Your output should contain 'Number of purchased tickets'");
            }
        }

        private void checkPercentage(String output, String correctNumber) {
            String[] splittedOutput = output.trim().split("\n");
            boolean isFound = false;

            for (String line : splittedOutput) {
                if (line.toLowerCase().contains("percentage")) {
                    line = line.toLowerCase().replace("percentage", "").replace(":", "").replace(",", ".").trim();
                    isFound = true;
                    if (!line.equals(correctNumber)) {
                        throw new WrongAnswer("Wrong percentage!\n" +
                            "Found: " + line + "\n" +
                            "Expected: " + correctNumber);
                    }
                }
            }
            if (!isFound) {
                throw new WrongAnswer("After choosing 'Statistics' item can't find information about the percentage.\n" +
                    "Your output should contain 'Percentage'");
            }
        }

        private void checkCurrentIncome(String output, String correctNumber) {
            String[] splittedOutput = output.trim().split("\n");
            boolean isFound = false;

            for (String line : splittedOutput) {
                if (line.toLowerCase().contains("current income")) {
                    line = line.toLowerCase().replace("current income", "").replace(":", "").trim();
                    isFound = true;
                    if (!line.equals(correctNumber)) {
                        throw new WrongAnswer("Wrong current income!\n" +
                            "Found: " + line + "\n" +
                            "Expected: " + correctNumber);
                    }
                }
            }
            if (!isFound) {
                throw new WrongAnswer("After choosing 'Statistics' item can't find information about the current income.\n" +
                    "Your output should contain 'Current income'");
            }
        }

        private void checkTotalIncome(String output, String correctNumber) {
            String[] splittedOutput = output.trim().split("\n");
            boolean isFound = false;

            for (String line : splittedOutput) {
                if (line.toLowerCase().contains("total income")) {
                    line = line.toLowerCase().replace("total income", "").replace(":", "").trim();
                    isFound = true;
                    if (!line.equals(correctNumber)) {
                        throw new WrongAnswer("Wrong total income!\n" +
                            "Found: " + line + "\n" +
                            "Expected: " + correctNumber);
                    }
                }
            }
            if (!isFound) {
                throw new WrongAnswer("After choosing 'Statistics' item can't find information about the total income.\n" +
                    "Your output should contain 'Total income'");
            }
        }


        private void checkSeats(String output, int rows, int columns) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "first ";
                } else if (i == 2) {
                    errorMessage += "second ";
                } else if (i == 3) {
                    errorMessage += "third ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                String line = splittedOutput[i].replace("" + i, "").trim();
                String seats = "";

                for (int j = 0; j < columns; j++) {
                    seats += "S ";
                }

                if (!line.toUpperCase().equals(seats.trim())) {
                    errorMessage += "should be \"" + i + " " + seats.trim() + "\"";
                    throw new WrongAnswer(errorMessage);
                }
            }
        }

        private void checkTakenSeat(String output, int rows, int columns, int row, int column) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "first ";
                } else if (i == 2) {
                    errorMessage += "second  ";
                } else if (i == 3) {
                    errorMessage += "third  ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                if (i == row) {
                    String line = splittedOutput[i];

                    if (!line.contains("b")) {
                        errorMessage += "should contain 'B' symbol.";
                        throw new WrongAnswer(errorMessage);
                    }

                    String[] splittedLine = line.trim().split(" ");

                    if (splittedLine.length != columns + 1) {
                        errorMessage += "should be printed like in examples. Expected 1 number, " + columns + " symbols and a single space between of them!";
                        throw new WrongAnswer(errorMessage);
                    }

                    if (!splittedLine[column].equals("b")) {
                        errorMessage += "should contain 'B' symbol at " + column + " column";
                        throw new WrongAnswer(errorMessage);
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/cinema/modal/Hall.java
  visible: true
  text: |+
    package cinema.modal;

    import java.awt.print.Book;
    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Collections;
    import java.util.List;

    public class Hall {
        private int totalRows;
        private int totalColumns;
        private List<Seat> seatsList = Collections.synchronizedList(new ArrayList<>());
        private List<BookedSeat> bookedSeatList = Collections.synchronizedList(new ArrayList<>());

        public Hall(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            initSeatList();
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getSeatsList() {
            return seatsList;
        }

        public void setSeatsList(List<Seat> seatsList) {
            this.seatsList = seatsList;
        }

        public List<BookedSeat> getBookedSeatList() {
            return bookedSeatList;
        }

        public void setBookedSeatList(List<BookedSeat> bookedSeatList) {
            this.bookedSeatList = bookedSeatList;
        }

        /***
         * Method to initialize the seat list and display seats status
         */
        public void initSeatList() {
            if(totalRows <= 0 || totalColumns <= 0 || totalRows > 9 || totalColumns > 9 ) {
                throw new Error("Out of bounds");
            }
            System.out.println("Cinema:");
            for(int i = 0; i <= totalRows; i++) {
                for(int j = 0; j <= totalColumns; j++) {
                    //if row == 0 and col == 0 print " "
                    if(i == 0 && j == 0) {
                        System.out.print(" ");
                    }else if(i == 0) {
                        System.out.print(j + " ");
                    } else if(j == 0) {
                        System.out.print(i + " ");
                    } else {
                        Seat seat = new Seat(i, j);
                        seatsList.add(seat);
                        System.out.print("S ");
                    }
                }
                System.out.print("\n");
            }
        }

        public boolean isAlreadyBooked(int row, int column) {
            for(BookedSeat bookedSeat : bookedSeatList) {
                if (bookedSeat.getRow() == row && bookedSeat.getColumn() == column) return true;
            }
            return false;
        }

        /***
         * Method to update the booked seat list and update the display of the seats
         */
        public void updateSeatList() {
            if(totalRows <= 0 || totalColumns <= 0 || totalRows > 9 || totalColumns > 9 ) {
                throw new Error("Out of bounds");
            }
            System.out.println("Cinema:");
            for(int i = 0; i <= totalRows; i++) {
                for(int j = 0; j <= totalColumns; j++) {
                    //if row == 0 and col == 0 print " "
                    if(i == 0 && j == 0) {
                        System.out.print(" ");
                    } else if(i == 0) {
                        System.out.print(j + " ");
                    } else if(j == 0) {
                        System.out.print(i + " ");
                    } else if(isAlreadyBooked(i, j)){
                        System.out.print("B ");
                    } else {
                        System.out.print("S ");
                    }
                }
                System.out.print("\n");
            }
        }


        public void showStats() {
            int numberOfPurchasedTicket = bookedSeatList.size();
            float soldTicketPercentage = (float) numberOfPurchasedTicket / (totalRows * totalColumns) * 100;
            int currentIncome = calculateCurrentIncome();
            int totalIncome = calculateProfit();

            System.out.printf("Number of purchased tickets: %d%n", numberOfPurchasedTicket);
            System.out.printf("Percentage: %.2f%n", soldTicketPercentage );
            System.out.printf("Current income: $%d%n", currentIncome );
            System.out.printf("Total income: $%d%n", totalIncome);
        }

        /**
         * method to calculate the profit
         */
        public int calculateProfit() {
            // calculate total number of seat
            int numberOfSeats = totalRows * totalColumns;
            int totalIncome = 0;
            if(numberOfSeats <= 60) {
                totalIncome = numberOfSeats * 10;
            } else {
                totalIncome += totalRows / 2 * 10 * totalColumns;
                totalIncome += (totalRows - totalRows / 2) * 8 * totalColumns;
            }
            return totalIncome;

        }


        /**
         * method to calculate ticket price
         */
        public int calculateTicketPrice(int row) {
            int pricePerSeat;
            if(row <= 0 || row >= totalRows) return 0;
            if( totalRows * totalColumns <= 60) {
                pricePerSeat = 10;
            } else {
                int firstHalf = totalRows / 2;
                if(row <= firstHalf ) {
                    pricePerSeat = 10;
                } else {
                    pricePerSeat = 8;
                }
            }
            return pricePerSeat;
        }

        /***
         * method to calculate the current income of the hall
         * @return (int) current income depending on the sold tickets
         */
        public int calculateCurrentIncome() {
            int currentIncome = 0;
            for(BookedSeat seat : bookedSeatList) {
                int  pricePerSeat = calculateTicketPrice(seat.getRow());
                currentIncome += pricePerSeat;
            }
            return currentIncome;
        }

    }

  learner_created: true
- name: src/cinema/service/Bootstrap.java
  visible: true
  text: |
    package cinema.service;

    import cinema.modal.BookedSeat;
    import cinema.modal.Hall;

    import java.util.Scanner;


    public class Bootstrap {


        public Bootstrap( ) {
            init();
        }

        /**
         * method to initialize the Cinema Hall
         */
        public void init() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter the number of rows:");
            int row = scanner.nextInt();
            System.out.println("Enter the number of seats in each row:");
            int column = scanner.nextInt();

            Hall hall = new Hall(row, column);
            scanner.close();
            handleMenu(hall);

        }

        public void handleMenu(Hall hall) {
            // show Menu
            System.out.println("1. Show the seats");
            System.out.println("2. Buy a ticket");
            System.out.println("3. Statistics");
            System.out.println("0. Exit");

            Scanner scanner = new Scanner(System.in);
            int menuOption = scanner.nextInt();
            switch (menuOption) {
                case 1:
                    // show the seats
                    hall.updateSeatList();
                    handleMenu(hall);
                    break;

                case 2:
                    //Buy a ticket
                    System.out.println("Enter a row number:");
                    int selectedRow = scanner.nextInt();
                    System.out.println("Enter a seat number in that row:");
                    int selectedColumn = scanner.nextInt();
                    boolean isAlreadyBooked = hall.isAlreadyBooked(selectedRow, selectedColumn);
                    if(!isAlreadyBooked) {
                        BookedSeat bookedSeat = new BookedSeat(selectedRow, selectedColumn, true);
                        hall.getBookedSeatList().add(bookedSeat);
                        hall.updateSeatList();
                        int ticketPrice =  hall.calculateTicketPrice(selectedRow);
                        System.out.printf("Ticket price: $%d%n", ticketPrice);
                    } else if (selectedColumn <= 0 || selectedColumn > hall.getTotalColumns() || selectedRow <= 0 || selectedRow > hall.getTotalRows()) {
                        System.out.println("Wrong input!");
                    } else {
                        System.out.println("That ticket has already been purchased!");
                    }

                    handleMenu(hall);
                    break;

                case 3:
                    // show stats
                    hall.showStats();
                    handleMenu(hall);
                    break;
                case 0:
                    return;

                default:
                    handleMenu(hall);
                    break;
            }
        }


















    }
  learner_created: true
- name: src/cinema/modal/BookedSeat.java
  visible: true
  text: |
    package cinema.modal;

    public class BookedSeat extends Seat{
        private boolean isBooked;

        public BookedSeat(int row, int column, boolean isBooked) {
            super(row, column);
            this.isBooked = isBooked;
        }

        public boolean isBooked() {
            return isBooked;
        }

        public void setBooked(boolean booked) {
            isBooked = booked;
        }
    }
  learner_created: true
- name: src/cinema/service/TicketCounter.java
  visible: true
  text: |
    package cinema.service;

    import java.util.Scanner;

    public class TicketCounter {

        public TicketCounter() {
        }

        public void sellTickets() {


        }
    }
  learner_created: true
- name: src/cinema/modal/Seat.java
  visible: true
  text: |
    package cinema.modal;

    public class Seat {
        private int row;
        private int column;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11109#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 30 Mar 2022 21:10:12 UTC
record: -1
